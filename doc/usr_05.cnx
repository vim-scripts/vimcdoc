*usr_05.txt*	Vim version 6.3  最近更新：2004年6月

		    VIM用户手册 - by Bram Moolenaar
		(译者：Nek_in http://vimcdoc.sf.net)

			     选项设置


Vim 可以按你的需要进行设置。本章告诉你怎样使 Vim 用你指定的选项启动，怎样增加
插件以增强 Vim 的功能；以及怎样进行宏定义。

|05.1|	vimrc 文件
|05.2|	vimrc 示例解释
|05.3|	简单键盘映射
|05.4|	增加插件
|05.5|	增加帮助
|05.6|	选项窗口
|05.7|	常用选项

      下一章：|usr_06.txt|  使用语法加亮
      前一章：|usr_04.txt|  做小改动
	目录：|usr_toc.txt|

=============================================================================
*05.1*	vimrc 文件					*vimrc-intro*

可能你已经厌倦了输入那些经常用到的命令了。要让 Vim 用你习惯的设置启动，你可以
把这些设置写到一个叫 vimrc 的文件中。Vim 会在启动的时候读入这个文件。

如果你不知道你的 vimrc 在什么地方，可以使用如下命令：
>
	:scriptnames

命令列出的文件列表开头的几个中应该有一个叫 ".vimrc" 或者 "_vimrc" 的文件在你的
home 目录中。
    如果你还没有 vimrc 文件，请参考 |vimrc| 一节看看你应该在什么地方创建 vimrc
文件。另外 ":version" 命令能告诉你 vim 在什么地方找 "用户的 vimrc 文件"。

对于 Unix 系统，肯定是如下文件：
>
	~/.vimrc

对于 MS-DOS 和 MS-Windows，常常使用下面其中一个文件：
>
	$HOME/_vimrc
	$VIM/_vimrc

vimrc 文件可以包含任何冒号命令。最简单的是设置选项命令。例如，如果你想 Vim 启
动的时候始终开启 'incsearch' 选项，可以在你的 vimrc 文件中加上：
>
	set incsearch

要使这个命令生效，你需要重启动 Vim。后面我们还会学到如何不退出 Vim 就能让它生
效。

这一章只解释最基本的东西。想了解更多关于 Vim 脚本的知识，请参见|usr_41.txt|。

=============================================================================
*05.2*	vimrc 示例解释					*vimrc_example.vim*

在第一章中，我们曾经介绍过怎样用 vimrc 示例文件（包括在 Vim 发布中）使 Vim 以
非vi 兼容模式启动（参见|not-compatible|）。这个文件可以在这里找到：

	$VIMRUNTIME/vimrc_example.vim ~

我们在这一节中介绍这个文件中用到的一些命令。这会对你自行参数设置有一定的帮助。
但我们不会介绍所有的内容。你需要用 ":help" 获得更多的帮助。
>

	set nocompatible

就像第一章所述，这些手册解释了 Vim 工作在改进的方式下，因此与 Vi 不完全兼容。
要关闭 'compatible' 选项设，'nocompatible' 可以用于完成这个功能。

>
	set backspace=indent,eol,start

这指明在插入模式下 <BS> 如何删除光标前面的字符。逗号分隔的三个值分别指：行首的
空白字符，分行符和插入模式开始处之前的字符。

>
	set autoindent

这使 Vim 在启动一个新行的时候使用与前一行一样的缩进。就是说，新行前面会有同样
多的空白字符。启动新行是指用 <Enter> 换行，在普通模式下执行 "o" 命令等情况。

>
	if has("vms")
	  set nobackup
	else
	  set backup
	endif

这告诉 Vim 当覆盖一个文件的时候保留一个备份。但 VMS 系统除外，因为 VMS 系统会
自动产生备份文件。备份文件的名称是在原来的文件名上加上 "~" 字符。参见 |07.4| 

>
	set history=50

这个命令保存 50 个命令和 50 个查找模式的历史。如果你想 Vim 记住多些或者少些
命令，可以把这个数改成其它值。

>
	set ruler

总在 Vim 窗口的右下角显示当前光标位置。

>
	set showcmd

在 Vim 窗口右下角，标尺的右边显示未完成的命令。例如，当你输入 "2f"，Vim 在等
你输入要查找的字符并且显示 "2f"。当你再输入w，"2fw" 命令被执行，"2f" 自动消
失。

	+-------------------------------------------------+
	|text in the Vim window				  |
	|~						  |
	|~						  |
	|-- VISUAL --			2f     43,8   17% |
	+-------------------------------------------------+
	 ^^^^^^^^^^^		      ^^^^^^^^ ^^^^^^^^^^
	  'showmode'		     'showcmd'	'ruler'

>
	set incsearch

在查找模式输入完前显示匹配点。

>
	map Q gq

这定义一个键映射。下一节会介绍更多的相关内容。这将定义 "Q" 命令用来完成与 "gq"
操作符相同的功能，这是在 Vim 5.0 版前 "Q" 命令的作用。如果没有设置这个映射，
"Q" 会启动 Ex 模式，这也许不是你想要的情况。

>
	vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

这是一个复杂映射。这里不介绍它是怎么工作的。它的作用是使 "p" 命令在可视模式下
用拷贝的字符覆盖被选中的字符。你可以看到映射可以被用来执行相当复杂的操作。但其
本质依然是一个命令序列而已，与你直接输入没有什么两样。

>
	if &t_Co > 2 || has("gui_running")
	  syntax on
	  set hlsearch
	endif

这激活语法加亮功能，但仅在颜色功能有效的时候才有效。而 'hlsearch' 选项告诉
Vim 加亮上次查找模式匹配的地方。"if" 命令在设置选项的时候非常有用，它使设置
命令在某些条件下才执行。更多的内容请参见|usr_41.txt|。

							*vimrc-filetype*  >
	filetype plugin indent on

这启动三个非常灵巧的机制：
1. 文件类型探测
    当你开始编辑一个文件的时候，Vim 会试图确定这个文件的类型。当编辑 "main.c"
    时，Vim 会根据扩展名 ".c" 认为这是一个 C 源文件。当你编辑一个文件前面是
    "#!/bin/sh" 的文件时，Vim 会把它认作 "sh" 文件。文件类型探测用于语法加亮
    和以下另两项。请参见|filetypes|。

2. 使用文件类型相关的插件
    不同的文件需要不同的选项支持。例如，当你编辑一个 "c" 文件，用 'cindent'
    选项来自动缩进就非常有用。这些文件类型相关的选项在 Vim 中是通过文件类型
    插件来实现的。你也可以加入自己的插件，请参见 |write-filetype-plugin|。

3. 使用缩进文件
    当编辑程序的时候，行缩进通常可以被自动决定。Vim 用不同的策略处理不同的
    文件类型。请参见 |:filetype-indent-on| 和 'indentexpr'。

>
	autocmd FileType text setlocal textwidth=78

这使 Vim 在一行长于 78 个字符的时候自动换行，但仅对纯文本文件中有效。这里包括
两个部分。其中 "autocmd FileType text" 定义个自动命令，表示当文件类型被设置为
"text" 的时候，后面的命令自动执行。"setlocal textwidth=78" 设置 'textwidth'
选项为78，但仅对本文件有效。
>

	autocmd BufReadPost *
	    \ if line("'\"") > 0 && line("'\"") <= line("$") |
	    \   exe "normal g`\"" |
	    \ endif

这是又一个自动命令。这回它设置为在读入任何文件之后自动执行。后面那堆复杂的东
西检查 '" 标记是否已被定义，如果是，则跳转到该标记。行首的反斜杠用于把所有语句
连接成一行。这可以避免一行写得太长，请参见 |line-continuation|。这只在 Vim
脚本文件中有效，在命令行中无效。

=============================================================================
*05.3*	简单键盘映射

映射可以使你把一系列 Vim 命令绑定为一个单键。假设你要用一个大括号将一个特定的
单词括起来。例如，把 "amount" 变成 "{amount}"。用 ":map" 命令，就可以让 F5 来
完成这个工作。命令如下：
>
	:map <F5> i{<Esc>ea}<Esc>
<
	Note:
	在输入这个命令时，<F5> 要用四个字符表示。相似地，输入 <Esc> 不是直接按
	<Esc> 键，而是输入五个字符。在读这份手册要注意这些区别！

让我们来分解一下这个命令：
    <F5>	F5 功能键。这是命令的触发器。当这个键被按下时，相应的命令即被
		执行。
    
    i{<Esc>     插入 { 字符。<Esc> 键用于退出插入模式。

    e		移动到词尾。

    a}<Esc>	插入 } 到单词尾。

执行 ":map" 命令后，要在单词两端加上 {}，只需要移到单词上的第一个字符并按 F5。

在这个例子中，触发器是一个单键；它还可以是任何字符串。但若你使用一个已经存在
的 Vim 命令，该命令将不在有效。所以你最好避免出现这种情况。
    一个可用于映射的键是反斜杠。因为你很可能想定义多个映射，那就加上另一个字
符。你可以映射 "\p" 为在单词两端加园括号，而映射 "\c" 为加花括号，例如：
>
	:map \p i(<Esc>ea)<Esc>
	:map \c i{<Esc>ea}<Esc>

你需要在敲入\后，立即敲入p，以便 Vim 知道它们组成一个命令。

":map" 命令（无参数）列出当前已定义的映射，至少会包括普通模式下的那些。更多的
内容参见 |40.1|。

==============================================================================
*05.4*	增加插件					*add-plugin* *plugin*

Vim 可以通过插件增强功能。插件其实是一个当 Vim 启动的时候能被自动执行的脚本。
简单地把插件放到你 Vim 的 plugin 目录中就可以使它生效。
（这个功能在 |+eval| 被编译进 Vim 中时才有效）

Vim 中有两种插件：
       全局插件：用于所有类型的文件
   文件类型插件：仅用于特定类型的文件

我们将先讨论全局插件，然后涉及文件类型插件 |add-filetype-plugin|。


全 局 插 件						*standard-plugin*

当你启动 Vim，它会自动加载一些插件。你不需要为此做任何事。这些插件增加一些
很多人想用的，但由 Vim 脚本实现而非编译进 Vim 中的功能。你可以在帮助索引中
找到这些插件：|standard-plugin-list|。还可以参照 |load-plugin|。

							*add-global-plugin*
你可以加入一个全局插件使得某些功能在你每次使用 Vim 时都被开启。添加一个全局
插件只要两步：
1. 获得一个插件的拷贝
2. 把它塞进合适的目录


获 得 一 个 全 局 插 件

在什么地方可以找到插件？
- 有一些与 Vim 一起发布，你可以在 $VIMRUNTIME/macros 目录或其子目录中找到。
- 从网上下载，查一下这个地方：http://vim.sf.net。
- 在 Vim 的邮件列表中找：|maillist|。
- 自己写一个，参见|write-plugin|。


使 用 一 个 全 局 插 件

首先阅读插件包括的说明文字，看看有没有什么特殊的限制。然后拷贝到你的插件
目录：


	系统		插件目录 ~
	Unix		~/.vim/plugin/
	PC and OS/2	$HOME/vimfiles/plugin 或 $VIM/vimfiles/plugin
	Amiga		s:vimfiles/plugin
	Macintosh	$VIM:vimfiles:plugin
	RISC-OS		Choices:vimfiles.plugin

以 Unix 系统为例（假设你还没有 plugin 目录）：
>
	mkdir ~/.vim
	mkdir ~/.vim/plugin
	cp /usr/local/share/vim/vim60/macros/justify.vim ~/.vim/plugin

就是这样了！现在你可以用这个插件定义的命令调整文字了。


文件类型插件			 *add-filetype-plugin* *ftplugins*

Vim 的发布中包括一套针对不同文件类型的插件。你可以用如下命令启用它们：
>
	:filetype plugin on

这样就行了！ 参阅 |vimrc-filetype|。

如果你缺少某种文件类型的插件，或者你找到一个更好的，你可以自行添加一个。这也
只需两步：
1. 获取一个插件的拷贝
2. 塞到合适的目录。


取 得 文 件 类 型 插 件

你可以在找全局插件的相同地方找到文件类型插件。注意一下插件有没有注明文件
类型，据此你可以知道这个插件是全局的还是文件类型相关的。在 $VIMRUNTIME/macros
中的是全局插件；文件类型插件在 $VIMRUNTIME/ftplugin 中。


使 用 文 件 类 型 插 件					*ftplugin-name*

你可以通过把插件文件放到合适的目录中来增加一个插件。目录的名字与前面提过的全局
插件的位置一样，但最后一级目录是 "ftplugin"。假设你找到一个用于 "stuff" 文
件类型的插件，而且你的系统是Unix。那么，你可以把这个文件用如下命令移入ftplugin
目录：
>
	mv thefile ~/.vim/ftplugin/stuff.vim

如果这个文件已经存在，你可以检查一下两个插件有没有冲突。如果没有，你可以用另
一个名字：
>
	mv thefile ~/.vim/ftplugin/stuff_too.vim

这里，下划线用来分开文件类型和其它部分（这些部分可以由任意字符组成）。但如果你
用 "otherstuff.vim" 就不行了。那是用于 "otherstuff" 类型的文件的。

在 MS-DOS 中不能使用长文件名。如果你增加第二个插件，而这个插件超过 6 个字符，
你就没法用了。你可以通过使用另一层目录来解决这个问题：
>
	mkdir $VIM/vimfiles/ftplugin/fortran
	copy thefile $VIM/vimfiles/ftplugin/fortran/too.vim

总的来说，一个文件类型相关的插件的名称是： 
>
	ftplugin/<filetype>.vim
	ftplugin/<filetype>_<name>.vim
	ftplugin/<filetype>/<name>.vim

这里 "<name>" 可以是任何你喜欢的名字。例如，在 Unix 下，"stuff" 文件类型的插件
可以是：
>
	~/.vim/ftplugin/stuff.vim
	~/.vim/ftplugin/stuff_def.vim
	~/.vim/ftplugin/stuff/header.vim

这里， <filetype> 部分是相应文件类型的名称。只有对应文件类型的文件才会用这个
插件内的设置。插件的 <name> 部分则不重要，你可以对同一个文件类型使用多个插件。
Note 插件必须以 ".vim" 结尾。


深入参考读物：
|filetype-plugins|	文件类型插件的文档和有关如何避免映射引起的问题。
|load-plugins|		全局插件的启动时间
|ftplugin-overrule|	控制全局文件类型插件的选项
|write-plugin|		如何写插件
|plugin-details|	关于如何使用插件的信息或者当你的插件不工作的时候如何
			处理。

==============================================================================
*05.5*	增加帮助			*add-local-help* *matchit-install*

如果幸运的话，你安装的插件还会包括帮助文件。我们这里解释如何安装这个帮助文件，
以便你能方便地获得新插件的帮助。

我们以 "matchit.vim" 插件为例（包括在 Vim 中）。这个插件使 "%" 命令可以在两个
对应的 HTML 标记间，Vim 脚本的 if/else/endif 间等匹配点间跳转。这非常有用，但
它不向前兼容（这也是为什么默认的情况下它不会被激活）。
    这个插件有一个文档："matchit.txt"。我们先来把该插件拷贝到合适的位置。
这次，我们在 Vim 内完成这个工作，以便利用$VIMRUNTIME。（如果某些目录已经存在
你可以省略一些 "mkdir" 命令）
>
	:!mkdir ~/.vim
	:!mkdir ~/.vim/plugin
	:!cp $VIMRUNTIME/macros/matchit.vim ~/.vim/plugin

现在在某个 'runtimepath' 目录中建立一个 doc 目录。
>
	:!mkdir ~/.vim/doc

再把帮助文件拷贝进去：
>
	:!cp $VIMRUNTIME/macros/matchit.txt ~/.vim/doc

现在开始玩技巧了，怎样使 Vim 允许你跳转到新的主题上？用 |:helptags| 命令产生
一个本地的tags文件即可：
>
	:helptags ~/.vim/doc

现在，你可以用这个命令
>
	:help g%

来获得 "g%" 的帮助了。在使用如下命令的时候，可以看见一个新的条目：
>
	:help local-additions

本地帮助的标题行被自动的加入到该节了。在那里你可以看到 Vim 添加了那些本地的
帮助文件。你还可以从这里跳转到新的帮助中。

要写一个本地帮助文件，请参考 |write-local-help|。

=============================================================================
*05.6*	选项窗口

如果要找一个选项，你可以查找这个位置的帮助：|options|。另一个方法是用如下命
令：
>
	:options

这会打开一个新窗口，其中给出一个选项的列表，并对每个选项提供一行解释。这些选项
被根据种类分组。把光标移到一个主题上然后按 <Enter> 就可以跳转到那里。再按一下
<Enter> 或者 CTRL-O 就可以跳回来。

你可以通过这个窗口改变一个选项的值。例如，移到 "displaying text" 主题。然后把
光标下移到这一行：

	set wrap	nowrap ~

当你在上面键入回车，这行会改变为：

	set nowrap      wrap ~

现在，这个选项被关闭了。

这行的上面是对这个选项的简要描述。将光标向上移动一行，然后按 <Enter>，你可以
跳转到 'wrap' 的完整帮助，再用 CTRL-O 可以跳回来。

对于那些值为数字或者字符串的选项，你可以编辑它的值，然后按 <Enter> 来启用该
值。例如，把光标移动到下面这行：

	set so=0 ~

用 $ 移到行尾，再用 "r5" 命令修改为五，然后按 <Enter> 使修改生效。现在如果你
移动一下光标，你会发现在你的光标移到窗口边界前，你的文字就开始滚动了。这就是
选项 'scrolloff' 完成的功能：它指定在距离边界多远的地方开始滚动文字。

=============================================================================
*05.7*	常用选项

Vim 中有很多选项。大部分你很少用得上。我们在这个介绍一些常用的。别忘了你可以
通过 ":help" 命令获得更多的帮助。方法是在选项命令前后加上单引号，例如：
>
	:help 'wrap'

如果你搞乱了一个选项，你可以通过在选项后加上一个 & 号把它恢复到默认值。例如：
>
	:set iskeyword&

禁 止 折 行

Vim 通常会对长行自动换行，以便你可以看见所有的文字。但有时最好还是能让文字在一
行中显示完。这样，你需要左右移动才能看到一整行。以下命令可以切换换行方式：
>
	:set nowrap

当你移到到那些不能显示的文字上，Vim 会自动向右滚动让你看到后面的文字，要一次滚
动十个字符，这样就行了：
>
	:set sidescroll=10

这个命令不改变文件中的文字，只改变显示方式。


移 动 命 令 换 行

很多命令只能在一行中移动。你可以通过 'whichwrap' 选项改变它。如下命令把这个选
项设为默认值：
>
	:set whichwrap=b,s

这样，当光标处于行首时用 <BS> 键可以回到前一行的结尾；当处于行尾时用 <Space>
键可以移动到下一行的行首。

要允许 <Left> 和 <Right> 键也能这样，可以用这个命令：
>
	set whichwrap=b,s,<,>

这只在普通模式中有效，要在插入模式中也有效，可以：
>
	:set whichwrap=b,s,<,>,[,]

还有一些可以用的标志，参见 'whichwrap'。


显 示 TAB 键

文件中有 TAB 键的时候，你是看不见的。要把它显示出来：
>
	:set list

现在 TAB 键显示为 ^I，而 $显示在每行的结尾，以便你能找到可能会被你忽略的空白
字符在哪里。
    这样做的一个缺点是在有很多 TAB 的时候看起来很丑。如果你使用一个有颜色的
终端，或者使用 GUI 模式，Vim 可以用高亮显示空格和TAB。 使用 'listchars' 选项：
>
	:set listchars=tab:>-,trail:-

现在，TAB会被显示成 ">---" ("-" 的个数不定) 而行尾多余的空白字符显示成 "-"。
看起来好多了，是吧？


关 键 字

'iskeyword' 选项指定那些字母可以出现在一个单词中：
>
	:set iskeyword
<	 iskeyword=@,48-57,_,192-255 ~

"@" 表示所有字母。"48-57" 表示 ASCII 字符 48-57 ，即数字 0 到 9。"192-255"
是可打印的拉丁字符。
    有时你希望横线也是关键字，以便 "w" 命令会把 "upper-case" 看作是一个单词。
你可以这样做：
>
	:set iskeyword+=-
	:set iskeyword
<	 iskeyword=@,48-57,_,192-255,- ~

看一下新的值，你会发现 Vim 自动在 "-" 前面加了一个逗号。
    要从中去掉一个字符用 "-="。例如要排除下划线：
>
	:set iskeyword-=_
	:set iskeyword
<	 iskeyword=@,48-57,192-255,- ~

这回，逗号自动被删除了。


显 示 消 息 的 空 间

当 Vim 启动的时候，在屏幕底部有一行被用于显示消息。当消息很长的时候，多余的部
分会被截断。这样你只能看到一部分。或者文字自动滚动，你要按 <Enter> 来继续。你
可以给 'cmdheight' 选项赋一个值，用来设定显示消息所用的行数。例如：
>
	:set cmdheight=3

这样意味着你用于编辑文字的空间少了，所以这实际上是一种折衷。

=============================================================================

下一章：|usr_06.txt|  使用语法加亮

版权：参见|manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
